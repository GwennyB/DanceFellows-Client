// <auto-generated />
using ClientSide_DanceFellows.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClientSide_DanceFellows.Migrations
{
    [DbContext(typeof(ClientSideDanceFellowsDbContext))]
    [Migration("20190207204501_updatestuff")]
    partial class updatestuff
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClientSide_DanceFellows.Models.Competition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompType");

                    b.Property<int>("Level");

                    b.HasKey("ID");

                    b.ToTable("Competitions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompType = 2,
                            Level = 1
                        });
                });

            modelBuilder.Entity("ClientSide_DanceFellows.Models.Participant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EligibleCompetitor");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("MaxLevel");

                    b.Property<int>("MinLevel");

                    b.Property<int>("WSC_ID");

                    b.HasKey("ID");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EligibleCompetitor = true,
                            FirstName = "JimBob",
                            LastName = "Franklin",
                            MaxLevel = 3,
                            MinLevel = 1,
                            WSC_ID = 1234
                        });
                });

            modelBuilder.Entity("ClientSide_DanceFellows.Models.RegisteredCompetitor", b =>
                {
                    b.Property<int>("CompetitionID");

                    b.Property<int>("ParticipantID");

                    b.Property<int>("BibNumber");

                    b.Property<int>("ChiefJudgeScore");

                    b.Property<int>("EventID");

                    b.Property<int>("JudgeFiveScore");

                    b.Property<int>("JudgeFourScore");

                    b.Property<int>("JudgeOneScore");

                    b.Property<int>("JudgeSixScore");

                    b.Property<int>("JudgeThreeScore");

                    b.Property<int>("JudgeTwoScore");

                    b.Property<int>("Placement");

                    b.Property<int>("Role");

                    b.HasKey("CompetitionID", "ParticipantID");

                    b.HasIndex("ParticipantID");

                    b.ToTable("RegisteredCompetitors");
                });

            modelBuilder.Entity("ClientSide_DanceFellows.Models.RegisteredCompetitor", b =>
                {
                    b.HasOne("ClientSide_DanceFellows.Models.Competition", "Competition")
                        .WithMany("RegisteredCompetitors")
                        .HasForeignKey("CompetitionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClientSide_DanceFellows.Models.Participant", "Participant")
                        .WithMany("RegisteredCompetitors")
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
